// Generated by IcedCoffeeScript 1.3.3f
(function() {
  var Dispatch, Packetizer, Reponse, debug, iced, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  Packetizer = require('./packetizer').Packetizer;

  debug = require('./debug');

  exports.Reponse = Reponse = (function() {

    function Reponse(dispatch, seqid) {
      this.dispatch = dispatch;
      this.seqid = seqid;
      this.debug = null;
    }

    Reponse.prototype.result = function(res) {
      if (this.debug) {
        this.debug.response(null, res);
        this.debug.call();
      }
      return this.dispatch.response(null, res);
    };

    Reponse.prototype.error = function(err) {
      if (this.debug) {
        this.debug.response(err, null);
        this.debug.call();
      }
      return this.dispatch.error(err, null);
    };

    return Reponse;

  })();

  exports.Dispatch = Dispatch = (function(_super) {

    __extends(Dispatch, _super);

    Dispatch.prototype.REQUEST = 0;

    Dispatch.prototype.RESPONSE = 1;

    Dispatch.prototype.NOTIFY = 2;

    function Dispatch() {
      this._invocations = {};
      this._handlers = {};
      this._seqid = 1;
      Dispatch.__super__.constructor.apply(this, arguments);
    }

    Dispatch.prototype._dispatch = function(msg) {
      var error, method, param, response, result, seqid, type;
      if (!msg instanceof Array || msg.length < 2) {
        return this._warn("Bad input packet in dispatch");
      } else {
        switch ((type = msg.shift())) {
          case this.REQUEST:
            seqid = msg[0], method = msg[1], param = msg[2];
            response = new Reponse(this, seqid);
            return this._serve({
              method: method,
              param: param,
              response: response
            });
          case this.NOTIFY:
            method = msg[0], param = msg[1];
            return this._serve({
              method: method,
              param: param
            });
          case this.RESPONSE:
            seqid = msg[0], error = msg[1], result = msg[2];
            return this._dispatch_handle_response({
              seqid: seqid,
              error: error,
              result: result
            });
          default:
            return this._warn("Unknown message type: " + type);
        }
      }
    };

    Dispatch.prototype._dispatch_handle_response = function(_arg) {
      var cb, error, result, seqid;
      seqid = _arg.seqid, error = _arg.error, result = _arg.result;
      cb = this._invocations[seqid];
      if (cb) {
        delete this._invocations[seqid];
        return cb(error, result);
      } else {
        return this._warn("Unknown response for seqid=" + seqid);
      }
    };

    Dispatch.prototype._next_seqid = function() {
      var ret;
      ret = this._seqid;
      this._seqid++;
      return ret;
    };

    Dispatch.make_method = function(prog, meth) {
      if (prog) {
        return [prog, meth].join(".");
      } else {
        return meth;
      }
    };

    Dispatch.prototype.invoke = function(_arg, cb) {
      var args, debug_hook, debug_msg, error, method, msg, program, result, seqid, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      program = _arg.program, method = _arg.method, args = _arg.args, debug_hook = _arg.debug_hook;
      method = this.make_method(program, method);
      seqid = this._next_seqid();
      msg = [this.REQUEST, seqid, method, arg];
      if (debug_hook) {
        debug_msg = new debug.Message({
          method: method,
          seqid: seqid,
          arg: arg,
          dir: debug.constants.dir.OUTGOING,
          remote: this.remote(),
          type: debug.constants.type.CLIENT_CALL
        });
        debug_hook(debug_msg.msg());
      }
      this.send(msg);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/dispatch.iced",
          funcname: "Dispatch.invoke"
        });
        _this._invocations[seqid] = __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              error = arguments[0];
              return result = arguments[1];
            };
          })(),
          lineno: 105
        });
        __iced_deferrals._fulfill();
      })(function() {
        if (debug_hook) {
          debug_msg.response(error, result);
          debug_hook(debug_msg.msg());
        }
        return cb(error, result);
      });
    };

    Dispatch.prototype.notify = function(_arg) {
      var args, debug_hook, debug_msg, method, msg, program;
      program = _arg.program, method = _arg.method, args = _arg.args, debug_hook = _arg.debug_hook;
      method = this.make_method(program, method);
      msg = [this.NOTIFY, method, arg];
      if (debug_hook) {
        debug_msg = new debug.Message({
          method: method,
          arg: arg,
          dir: debug.constants.dir.OUTGOING,
          remote: this.remote(),
          type: debug.constants.type.CALL_NOTIFY
        });
        debug_hook(debug_msg.msg());
      }
      return this.send(msg);
    };

    Dispatch.prototype._serve = function(_arg) {
      var debug_msg, method, pair, param, response;
      method = _arg.method, param = _arg.param, response = _arg.response;
      pair = this.get_handler_pair(method);
      if (debug_hook) {
        debug_msg = new debug.Message({
          method: method,
          arg: param,
          dir: debug.constants.dir.INCOMING,
          remote: this.remote(),
          type: debug.constants.type.SERVER,
          error: pair ? null : "unknown method"
        }, debug_hook);
        if (response) response.debug = debug_msg;
        debug_msg.call();
      }
      if (pair) {
        return handler.call(self, param, response);
      } else if (response != null) {
        return response.error(new Error("unknown method " + method));
      }
    };

    Dispatch.prototype.get_handler_this = function(m) {
      return this;
    };

    Dispatch.prototype.get_handler_pair = function(m) {
      var h;
      h = this._handlers[m];
      if (h) {
        return [this.get_handler_this(), h];
      } else {
        return null;
      }
    };

    Dispatch.prototype.add_handler = function(method, hook, program) {
      if (program == null) program = null;
      method = this.make_method(program, hook);
      return this._handlers[method] = hook;
    };

    Dispatch.prototype.add_program = function(program, hooks) {
      var hook, method, _results;
      _results = [];
      for (method in hooks) {
        hook = hooks[method];
        _results.push(this.add_handler(method, hook, program));
      }
      return _results;
    };

    Dispatch.prototype.add_programs = function(programs) {
      var hooks, program, _results;
      _results = [];
      for (program in programs) {
        hooks = programs[program];
        _results.push(this.add_program(program, hook));
      }
      return _results;
    };

    return Dispatch;

  })(Packetizer);

}).call(this);
