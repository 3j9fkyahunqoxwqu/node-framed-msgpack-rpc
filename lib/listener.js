// Generated by IcedCoffeeScript 1.3.3f
(function() {
  var TcpListener, TcpTransport, iced, net, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  net = require('net');

  TcpTransport = require('./transport').TcpTransport;

  exports.TcpListener = TcpListener = (function() {

    function TcpListener(_arg) {
      this.port = _arg.port, this.host = _arg.host, this.TransportClass = _arg.TransportClass;
      if (!this.TransportClass) this.TransportClass = TcpTransport;
    }

    TcpListener.prototype.make_new_transport = function(c) {
      return new this.TransportClass({
        tcp_stream: c,
        host: c.remoteAddress,
        port: c.remotePort,
        parent: this
      });
    };

    TcpListener.prototype._got_new_connection = function(c) {
      return this.got_new_connection(this.make_new_transport(c));
    };

    TcpListener.prototype._make_server = function() {
      var _this = this;
      return this._tcp_server = net.createServer(function(c) {
        return _this._got_new_connection(c);
      });
    };

    TcpListener.prototype._warn = function(err, hook) {
      var addr;
      if (!hook) hook = console.log;
      addr = this.host ? this.host : "0.0.0.0";
      return hook("" + addr + ":" + this.port + ": " + err);
    };

    TcpListener.prototype.listen = function(cb) {
      var ERR, OK, err, rv, which, x, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      this._make_server();
      _ref = [0, 1], OK = _ref[0], ERR = _ref[1];
      rv = new iced.Rendzvous;
      x = this._tcp_server;
      x.listen(this.port, this.host);
      x.on('error', rv.id(ERR).__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return err = arguments[0];
          };
        })(),
        lineno: 53
      }));
      x.on('listening', rv.id(OK).__iced_deferrals.defer({
        lineno: 53
      }));
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/listener.iced",
          funcname: "TcpListener.listen"
        });
        rv.wait(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return which = arguments[0];
            };
          })(),
          lineno: 56
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (which === OK) {
          err = null;
          x.on('error', function(err) {
            return _this.handle_error(err);
          });
          x.on('close', function(err) {
            return _this.handle_close();
          });
        } else {
          _this._tcp_server = null;
        }
        return cb(err);
      });
    };

    TcpListener.prototype.listen_retry = function(delay, cb, log_hook) {
      var err, go, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (log_hook == null) log_hook = null;
      go = true;
      err = null;
      (function(__iced_k) {
        var _results, _while;
        _results = [];
        _while = function(__iced_k) {
          var _break, _continue, _next;
          _break = function() {
            return __iced_k(_results);
          };
          _continue = function() {
            return _while(__iced_k);
          };
          _next = function(__iced_next_arg) {
            _results.push(__iced_next_arg);
            return _continue();
          };
          if (!go) {
            return _break();
          } else {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/listener.iced",
                funcname: "TcpListener.listen_retry"
              });
              _this.listen(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 72
              }));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                if ((err != null ? err.code : void 0) === 'EADDRINUSE') {
                  _this._warn(err, log_hook);
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "src/listener.iced",
                      funcname: "TcpListener.listen_retry"
                    });
                    setTimeout(__iced_deferrals.defer({
                      lineno: 74
                    }), delay);
                    __iced_deferrals._fulfill();
                  })(__iced_k);
                } else {
                  return __iced_k(go = false);
                }
              })(_next);
            });
          }
        };
        _while(__iced_k);
      })(function() {
        return cb(err);
      });
    };

    return TcpListener;

  })();

}).call(this);
