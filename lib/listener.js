// Generated by IcedCoffeeScript 1.3.3g
(function() {
  var List, Listener, Transport, iced, log, net, __iced_k, __iced_k_noop;

  __iced_k = __iced_k_noop = function() {};

  net = require('net');

  Transport = require('./transport').Transport;

  List = require('./list').List;

  log = require('./log');

  iced = require('./iced').runtime;

  exports.Listener = Listener = (function() {

    function Listener(_arg) {
      var log_obj;
      this.port = _arg.port, this.host = _arg.host, this.TransportClass = _arg.TransportClass, log_obj = _arg.log_obj;
      if (!this.TransportClass) this.TransportClass = Transport;
      this.set_logger(log_obj);
      this._children = new List;
    }

    Listener.prototype._default_logger = function() {
      var h, l;
      l = log.new_default_logger();
      l.set_prefix("RPC-Server");
      h = this.host || "0.0.0.0";
      l.set_remote("" + h + ":" + this.port);
      return l;
    };

    Listener.prototype.set_logger = function(o) {
      if (o == null) o = this._default_logger();
      return this.log_obj = o;
    };

    Listener.prototype.make_new_transport = function(c) {
      var x;
      x = new this.TransportClass({
        tcp_stream: c,
        host: c.remoteAddress,
        port: c.remotePort,
        parent: this,
        log_obj: this.make_new_log_object(c)
      });
      this._children.push(x);
      return x;
    };

    Listener.prototype.make_new_log_object = function(c) {
      var a, r;
      a = c.address();
      r = [c.address, c.port].join(":");
      return this.log_obj.make_child({
        prefix: "RPC",
        remote: r
      });
    };

    Listener.prototype.walk_children = function(fn) {
      return this._children.walk(fn);
    };

    Listener.prototype.close_child = function(c) {
      return this._children.remove(c);
    };

    Listener.prototype.set_port = function(p) {
      return this.port = p;
    };

    Listener.prototype._got_new_connection = function(c) {
      var x;
      x = this.make_new_transport(c);
      return this.got_new_connection(x);
    };

    Listener.prototype.got_new_connection = function(x) {
      throw new Error("@got_new_connection() is pure virtual; please implement!");
    };

    Listener.prototype._make_server = function() {
      var _this = this;
      return this._tcp_server = net.createServer(function(c) {
        return _this._got_new_connection(c);
      });
    };

    Listener.prototype.close = function(cb) {
      var ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        if (_this._tcp_server) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/listener.iced",
              funcname: "Listener.close"
            });
            _this._tcp_server.close(__iced_deferrals.defer({
              lineno: 90
            }));
            __iced_deferrals._fulfill();
          })(__iced_k);
        } else {
          return __iced_k();
        }
      })(function() {
        _this._tcp_server = null;
        return cb();
      });
    };

    Listener.prototype.handle_close = function() {
      return this.log_obj.info("listener closing down");
    };

    Listener.prototype.handle_error = function(err) {
      this._tcp_server = null;
      return this.log_obj.error("error in listener: " + err);
    };

    Listener.prototype._set_hooks = function() {
      var _this = this;
      this._tcp_server.on('error', function(err) {
        return _this.handle_error(err);
      });
      return this._tcp_server.on('close', function(err) {
        return _this.handle_close();
      });
    };

    Listener.prototype.listen = function(cb) {
      var ERR, OK, err, rv, which, x, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      this._make_server();
      _ref = [0, 1], OK = _ref[0], ERR = _ref[1];
      rv = new iced.Rendezvous;
      x = this._tcp_server;
      x.listen(this.port, this.host);
      x.on('error', rv.id(ERR).__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return err = arguments[0];
          };
        })(),
        lineno: 123
      }));
      x.on('listening', rv.id(OK).__iced_deferrals.defer({
        lineno: 123
      }));
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/listener.iced",
          funcname: "Listener.listen"
        });
        rv.wait(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return which = arguments[0];
            };
          })(),
          lineno: 126
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (which === OK) {
          err = null;
          _this._set_hooks();
        } else {
          _this.log_obj.error(err);
          _this._tcp_server = null;
        }
        return cb(err);
      });
    };

    Listener.prototype.listen_retry = function(delay, cb) {
      var err, go, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      go = true;
      err = null;
      (function(__iced_k) {
        var _results, _while;
        _results = [];
        _while = function(__iced_k) {
          var _break, _continue, _next;
          _break = function() {
            return __iced_k(_results);
          };
          _continue = function() {
            return iced.trampoline(function() {
              return _while(__iced_k);
            });
          };
          _next = function(__iced_next_arg) {
            _results.push(__iced_next_arg);
            return _continue();
          };
          if (!go) {
            return _break();
          } else {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/listener.iced",
                funcname: "Listener.listen_retry"
              });
              _this.listen(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 144
              }));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                if ((err != null ? err.code : void 0) === 'EADDRINUSE') {
                  _this.log_obj.warn(err);
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "src/listener.iced",
                      funcname: "Listener.listen_retry"
                    });
                    setTimeout(__iced_deferrals.defer({
                      lineno: 146
                    }), delay * 1000);
                    __iced_deferrals._fulfill();
                  })(__iced_k);
                } else {
                  return __iced_k(go = false);
                }
              })(_next);
            });
          }
        };
        _while(__iced_k);
      })(function() {
        return cb(err);
      });
    };

    return Listener;

  })();

}).call(this);
